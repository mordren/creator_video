#!/usr/bin/env python3
import os
import sys
import pickle
import json
from pathlib import Path
from datetime import datetime, timedelta
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.auth.transport.requests import Request
from google_auth_oauthlib.flow import InstalledAppFlow

# Adiciona o diret√≥rio atual ao path para imports
sys.path.append(str(Path(__file__).parent))

class YouTubeUploader:
    def __init__(self):
        from crud.manager import DatabaseManager
        self.db = DatabaseManager()
        self.SCOPES = ['https://www.googleapis.com/auth/youtube.upload']

    def upload_video(self, roteiro_id: int, publicar_imediato: bool = False) -> bool:
        """Faz upload de um v√≠deo para o YouTube com suporte a agendamento e publica√ß√£o imediata"""
        print(f"üì§ Iniciando upload para YouTube - Roteiro ID: {roteiro_id}")
        print(f"üöÄ Modo: {'PUBLICA√á√ÉO IMEDIATA' if publicar_imediato else 'AGENDAMENTO/RESPEITAR AGENDAMENTOS'}")
        
        try:
            # Busca informa√ß√µes no banco
            roteiro, canal, video_info = self._buscar_dados_banco(roteiro_id)
            if not all([roteiro, canal, video_info]):
                return False

            # Verifica se o arquivo de v√≠deo existe
            video_path = Path(video_info.arquivo_video)
            if not self._verificar_arquivo_video(video_path):
                return False

            # Busca agendamentos (a menos que seja publica√ß√£o imediata)
            agendamento_yt = None
            if not publicar_imediato:
                agendamento_yt = self._buscar_agendamento_youtube(roteiro_id)

            # Carrega configura√ß√£o do canal
            config = self._carregar_config_canal(canal.config_path)
            if not config:
                return False

            # Autentica√ß√£o no YouTube
            youtube = self._autenticar(canal)
            if not youtube:
                return False

            # Determina tipo de v√≠deo (Short/Long)
            is_short = self._determinar_tipo_video(roteiro, video_path)

            # Faz o upload
            success = self._fazer_upload(
                youtube=youtube,
                video_path=video_path,
                roteiro=roteiro,
                is_short=is_short,
                agendamento=agendamento_yt,
                publicar_imediato=publicar_imediato
            )

            # Atualiza status se bem-sucedido
            if success:
                self._atualizar_status_upload(agendamento_yt, roteiro_id)
                return True
            
            return False

        except Exception as e:
            print(f"‚ùå Erro cr√≠tico durante upload: {e}")
            import traceback
            traceback.print_exc()
            return False

    def _buscar_dados_banco(self, roteiro_id: int):
        """Busca dados necess√°rios no banco de dados"""
        try:
            roteiro = self.db.roteiros.buscar_por_id(roteiro_id)
            if not roteiro:
                print(f"‚ùå Roteiro n√£o encontrado: {roteiro_id}")
                return None, None, None

            canal = self.db.canais.buscar_por_id(roteiro.canal_id)
            if not canal:
                print(f"‚ùå Canal n√£o encontrado para roteiro: {roteiro_id}")
                return None, None, None

            video_info = self.db.videos.buscar_por_roteiro_id(roteiro_id)
            if not video_info:
                print(f"‚ùå Informa√ß√µes de v√≠deo n√£o encontradas: {roteiro_id}")
                return None, None, None

            print(f"‚úÖ Dados carregados - Canal: {canal.nome}, V√≠deo: {roteiro.titulo}")
            return roteiro, canal, video_info

        except Exception as e:
            print(f"‚ùå Erro ao buscar dados no banco: {e}")
            return None, None, None

    def _verificar_arquivo_video(self, video_path: Path) -> bool:
        """Verifica se o arquivo de v√≠deo existe e √© v√°lido"""
        if not video_path.exists():
            print(f"‚ùå Arquivo de v√≠deo n√£o encontrado: {video_path}")
            return False
        
        if video_path.stat().st_size == 0:
            print(f"‚ùå Arquivo de v√≠deo est√° vazio: {video_path}")
            return False
        
        print(f"‚úÖ Arquivo de v√≠deo v√°lido: {video_path} ({video_path.stat().st_size / (1024*1024):.1f} MB)")
        return True

    def _buscar_agendamento_youtube(self, roteiro_id: int):
        """Busca agendamentos ativos para YouTube"""
        try:
            agendamentos = self.db.agendamentos.buscar_por_video_id(roteiro_id)
            
            for agendamento in agendamentos:
                plataformas = json.loads(agendamento.plataformas)
                if 'youtube' in plataformas and agendamento.status == 'agendado':
                    print(f"üìÖ Agendamento encontrado: {agendamento.data_publicacao} {agendamento.hora_publicacao}")
                    return agendamento
            
            print("‚ÑπÔ∏è Nenhum agendamento ativo encontrado para YouTube")
            return None

        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao buscar agendamentos: {e}")
            return None

    def _carregar_config_canal(self, config_path: str):
        """Carrega configura√ß√£o do canal"""
        try:
            from read_config import carregar_config_canal
            config = carregar_config_canal(config_path)
            print(f"‚úÖ Configura√ß√£o carregada: {config.get('NOME_CANAL', 'desconhecido')}")
            return config
        except Exception as e:
            print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
            return None

    def _autenticar(self, canal):
        """Autentica no YouTube API"""
        try:
            credentials_path = Path('assets/client_secret.json')
            token_path = Path(canal.config_path) / 'token.pickle'
            
            if not credentials_path.exists():
                print(f"‚ùå Arquivo de credenciais n√£o encontrado: {credentials_path}")
                return None

            creds = self._carregar_credenciais(token_path)
            
            if not creds or not creds.valid:
                creds = self._renovar_credenciais(creds, credentials_path, token_path)
                if not creds:
                    return None

            print("‚úÖ Autentica√ß√£o no YouTube bem-sucedida")
            return build('youtube', 'v3', credentials=creds)

        except Exception as e:
            print(f"‚ùå Erro na autentica√ß√£o: {e}")
            return None

    def _carregar_credenciais(self, token_path: Path):
        """Carrega credenciais existentes do token"""
        if token_path.exists():
            try:
                with open(token_path, 'rb') as token:
                    creds = pickle.load(token)
                print("‚úÖ Credenciais carregadas do token existente")
                return creds
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar token: {e}")
        return None

    def _renovar_credenciais(self, creds, credentials_path: Path, token_path: Path):
        """Renova ou obt√©m novas credenciais"""
        try:
            if creds and creds.expired and creds.refresh_token:
                print("üîÑ Refrescando credenciais expiradas...")
                creds.refresh(Request())
            else:
                print("üîê Iniciando fluxo de autentica√ß√£o OAuth...")
                flow = InstalledAppFlow.from_client_secrets_file(str(credentials_path), self.SCOPES)
                creds = flow.run_local_server(port=0, open_browser=True)
            
            # Salva as credenciais para uso futuro
            with open(token_path, 'wb') as token:
                pickle.dump(creds, token)
            print("‚úÖ Novas credenciais salvas")
            return creds
            
        except Exception as e:
            print(f"‚ùå Erro ao renovar credenciais: {e}")
            return None

    def _determinar_tipo_video(self, roteiro, video_path: Path) -> bool:
        """Determina se o v√≠deo √© Short ou Long"""
        # Por resolu√ß√£o
        if roteiro.resolucao:
            resolucao = roteiro.resolucao.lower()
            if any(vert in resolucao for vert in ['720x1280', '1080x1920', 'vertical']):
                print("üéØ V√≠deo identificado como SHORT (resolu√ß√£o vertical)")
                return True
            if any(horiz in resolucao for horiz in ['1280x720', '1920x1080', 'horizontal']):
                print("üé¨ V√≠deo identificado como LONG (resolu√ß√£o horizontal)")
                return False
        
        # Por nome do arquivo
        video_name = video_path.name.lower()
        if 'short' in video_name:
            print("üéØ V√≠deo identificado como SHORT (nome do arquivo)")
            return True
        if 'long' in video_name:
            print("üé¨ V√≠deo identificado como LONG (nome do arquivo)")
            return False
        
        # Fallback: considera como Long
        print("‚ÑπÔ∏è Tipo de v√≠deo n√£o identificado, usando LONG como padr√£o")
        return False

    def _fazer_upload(self, youtube, video_path: Path, roteiro, is_short: bool, 
                     agendamento, publicar_imediato: bool) -> bool:
        """Executa o upload do v√≠deo para o YouTube"""
        try:
            # Prepara metadados
            body = self._preparar_metadados(roteiro, is_short)
            
            # Configura status de publica√ß√£o
            self._configurar_status_publicacao(body, agendamento, publicar_imediato)
            
            # Executa upload
            return self._executar_upload(youtube, video_path, body, is_short)
            
        except Exception as e:
            print(f"‚ùå Erro durante o upload: {e}")
            return False

    def _preparar_metadados(self, roteiro, is_short: bool) -> dict:
        """Prepara os metadados do v√≠deo"""
        # Tags b√°sicas
        tags = []
        if roteiro.tags:
            tags = [tag.strip() for tag in roteiro.tags.split(',') if tag.strip()]
        
        # Adiciona tag de Short se necess√°rio
        if is_short:
            tags.append('shorts')
            print("üè∑Ô∏è Adicionada tag 'shorts'")
        
        # Limita tags a 500 caracteres (limite do YouTube)
        all_tags = ','.join(tags)
        if len(all_tags) > 500:
            print(f"‚ö†Ô∏è Tags muito longas ({len(all_tags)} chars), truncando...")
            tags = tags[:10]  # Mant√©m apenas as primeiras 10 tags
        
        body = {
            'snippet': {
                'title': roteiro.titulo[:100],  # Limite de 100 caracteres
                'description': (roteiro.descricao or '')[:5000],  # Limite de 5000 caracteres
                'tags': tags,
                'categoryId': '22'  # Educa√ß√£o
            },
            'status': {
                'privacyStatus': 'private'  # Padr√£o: privado
            }
        }
        
        print(f"üìù Metadados preparados - T√≠tulo: {roteiro.titulo}")
        print(f"üìã Tags: {', '.join(tags[:5])}{'...' if len(tags) > 5 else ''}")
        
        return body

    def _configurar_status_publicacao(self, body: dict, agendamento, publicar_imediato: bool):
        """Configura o status de publica√ß√£o baseado nas op√ß√µes"""
        if publicar_imediato:
            # Publica√ß√£o imediata
            body['status']['privacyStatus'] = 'public'
            print("üöÄ Configurado para PUBLICAR IMEDIATAMENTE")
            
        elif agendamento:
            # Agendamento
            data_publicacao = datetime.strptime(agendamento.data_publicacao, '%Y-%m-%d')
            hora_publicacao = datetime.strptime(agendamento.hora_publicacao, '%H:%M').time()
            data_hora_local = datetime.combine(data_publicacao, hora_publicacao)
            
            # Converte para UTC (Brasil UTC-3 ‚Üí UTC)
            data_hora_utc = data_hora_local + timedelta(hours=3)
            publish_at = data_hora_utc.isoformat() + 'Z'
            
            body['status']['publishAt'] = publish_at
            body['status']['privacyStatus'] = 'private'  # YouTube muda para p√∫blico no hor√°rio
            
            print(f"‚è∞ Agendado para: {data_hora_local} (local)")
            print(f"üåê Hor√°rio UTC: {data_hora_utc}")
            
        else:
            # Sem agendamento, sem publica√ß√£o imediata ‚Üí privado
            body['status']['privacyStatus'] = 'private'
            print("üîí V√≠deo ser√° enviado como PRIVADO")

    def _executar_upload(self, youtube, video_path: Path, body: dict, is_short: bool) -> bool:
        """Executa o upload propriamente dito"""
        try:
            print("‚¨ÜÔ∏è Iniciando upload...")
            
            media = MediaFileUpload(
                str(video_path),
                chunksize=-1,
                resumable=True,
                mimetype='video/mp4'
            )
            
            request = youtube.videos().insert(
                part=','.join(body.keys()),
                body=body,
                media_body=media
            )
            
            # Upload resum√°vel
            response = self._upload_resumavel(request)
            
            if response:
                video_id = response['id']
                print(f"‚úÖ Upload conclu√≠do! Video ID: {video_id}")
                
                # Se for Short, tenta adicionar √† playlist de Shorts
                if is_short:
                    self._tentar_adicionar_shorts_playlist(youtube, video_id)
                
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o do upload: {e}")
            return False

    def _upload_resumavel(self, request):
        """Executa upload resum√°vel com retentativas"""
        response = None
        retry = 0
        max_retries = 3
        
        while response is None and retry < max_retries:
            try:
                status, response = request.next_chunk()
                if status:
                    progresso = int(status.progress() * 100)
                    print(f"üìä Progresso do upload: {progresso}%")
                    
            except Exception as e:
                retry += 1
                if retry < max_retries:
                    print(f"üîÑ Retentativa {retry}/{max_retries} em 5 segundos...")
                    import time
                    time.sleep(5)
                else:
                    print(f"‚ùå Falha ap√≥s {max_retries} tentativas: {e}")
                    raise e
        
        return response

    def _tentar_adicionar_shorts_playlist(self, youtube, video_id: str):
        """Tenta adicionar o v√≠deo √† playlist de Shorts (opcional)"""
        try:
            # Busca a playlist de uploads do canal
            channels_response = youtube.channels().list(
                part='contentDetails',
                mine=True
            ).execute()
            
            if not channels_response.get('items'):
                print("‚ö†Ô∏è N√£o foi poss√≠vel obter informa√ß√µes do canal")
                return
            
            uploads_playlist_id = channels_response['items'][0]['contentDetails']['relatedPlaylists']['uploads']
            
            # Adiciona √† playlist de uploads
            youtube.playlistItems().insert(
                part='snippet',
                body={
                    'snippet': {
                        'playlistId': uploads_playlist_id,
                        'resourceId': {
                            'kind': 'youtube#video',
                            'videoId': video_id
                        }
                    }
                }
            ).execute()
            
            print("üìã V√≠deo adicionado √† playlist de uploads do canal")
            
        except Exception as e:
            print(f"‚ö†Ô∏è N√£o foi poss√≠vel adicionar √† playlist: {e}")

    def _atualizar_status_upload(self, agendamento, roteiro_id: int):
        """Atualiza status no banco ap√≥s upload bem-sucedido"""
        try:
            if agendamento:
                # Atualiza status do agendamento
                self.db.agendamentos.atualizar(agendamento.id, status='agendado_no_youtube')
                print("üìÖ Status do agendamento atualizado para 'agendado_no_youtube'")
            else:
                # Atualiza status do v√≠deo
                self.db.roteiros.atualizar(roteiro_id, finalizado=True)
                print("‚úÖ Status do v√≠deo atualizado para 'finalizado'")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao atualizar status no banco: {e}")

def main():
    """Fun√ß√£o principal para execu√ß√£o via linha de comando"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Fazer upload de v√≠deo para YouTube')
    parser.add_argument('roteiro_id', type=int, help='ID do roteiro no banco de dados')
    parser.add_argument('--publicar-agora', action='store_true', 
                       help='Publicar v√≠deo imediatamente (ignora agendamentos)')
    
    args = parser.parse_args()
    
    success = YouTubeUploader().upload_video(
        roteiro_id=args.roteiro_id,
        publicar_imediato=args.publicar_agora
    )
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()